#
# Peer to peer comms module (main one)
#

# socket_create() type values
SOCK_STREAM		.const 1	# Sequenced, reliable, connection-based byte streams.
SOCK_DGRAM		.const 2	# Connectionless, unreliable datagrams of fixed maximum length.
SOCK_RAW		.const 3	# Raw protocol interface.

# socket_create() proto values
IPPROTO_TCP		.const 6
IPPROTO_UDP		.const 17


# socket_shutdown() options
SHUT_RD		.const 0	# No more receptions.
SHUT_WR		.const 1	# No more transmissions.
SHUT_RDWR	.const 2	# No more receptions or transmissions.


SIOCGIFNAME		.const 0x8910
SIOCGIFCONF		.const 0x8912
SIOCGIFHWADDR	.const 0x8927

comm_port .const 9771

#####################################################################
start:
	.sub # ( -- )

	lea		@@banner_text
	call	log

	call	get_hwaddr
	br.f	@@exit

	lea		comm_hwaddr
	ldc.ub	5
	dup
	ldm.ub
	swap
	ldc.1
	sub
	dup
	ldm.ub
	swap
	ldc.1
	sub
	dup
	ldm.ub
	swap
	ldc.1
	sub
	dup
	ldm.ub
	swap
	ldc.1
	sub
	dup
	ldm.ub
	swap
	ldc.1
	sub
	ldm.ub
	lea		@@hwaddr_text
	ldc.1
	ncall	rtl_print_fd
	pop

	call	comm_loop

@@exit:
	ldc.0
	ncall	sys_exit

@@banner_text:
	.defs	"mette p2p core starting up.\n\0"
@@hwaddr_text:
	.defs	"hw addr: %02x %02x %02x %02x %02x %02x\n\0"

	.endsub
# End of start routine
#####################################################################

#####################################################################
comm_loop:
	.sub # ( -- )

@@sockfd	.const 0
@@peer		.const 1
	locals	2

	# Create a UDP socket.
	ldc.ub	IPPROTO_UDP
	ldc.ub	SOCK_DGRAM
	ncall	socket_create
	dup
	stloc	@@sockfd

	ldc.0
	cmp.gt	# 0 > x
	br.f	@@socket_create_ok
	lea		@@socket_creation_failed_text
	call	log_fatal

@@socket_create_ok:
	# Bind to 0.0.0.0:comm_port.
	ldc.w	comm_port # port
	ldc.0	# ip
	ncall	sockaddr_create
	dup
	stloc	@@peer
	ldloc	@@sockfd
	ncall	socket_bind

	ldc.0
	cmp.gt
	br.f	@@socket_bind_ok
	lea		@@socket_bind_failed_text
	call	log_fatal

@@socket_bind_ok:
	lea		@@loop_enter_text
	call	log

@@recv_loop:
	ldloc	@@peer
	ldc.w	0x1000 # maxlength
	ldloc	@@sockfd
	ncall	socket_recvfrom

	dup
	dup
	ldc.0
	cmp.eq
	br.f	@@recv_ok
	lea		@@socket_recv_failed_text
	call	log_fatal

@@recv_ok:
	# Process the packet
	ldloc	@@peer
	ldloc	@@sockfd
	call	comm_process_packet

	ncall	rtl_free

	# See if we are still running.
	lea		comm_running
	ldm.ub
	ldc.0
	cmp.eq
	br.f	@@recv_loop

	# Exiting.
	lea		@@loop_leave_text
	call	log

	# Close the socket.
	ldc.ub	SHUT_RDWR
	ldloc	@@sockfd
	ncall	socket_shutdown

	ldloc	@@sockfd
	ncall	io_close

	lea		@@done_text
	call	log

	ret

@@socket_creation_failed_text:
	.defs	"main: failed to create socket.\n\0"
@@socket_bind_failed_text:
	.defs	"main: failed to bind socket.\n\0"
@@socket_recv_failed_text:
	.defs	"main: failed to recv from socket.\n\0"
@@loop_enter_text:
	.defs	"main: entering processing loop.\n\0"
@@loop_leave_text:
	.defs	"main: leaving processing loop.\n\0"
@@done_text:
	.defs	"main: done!\n\0"

	.endsub

# End of main routine
#####################################################################

#####################################################################
comm_process_packet:
	.sub # ( fd from packet -- )

	pop
	pop
	lea		incoming_packet_text
	ldc.1
	ncall	rtl_print_fd
	pop
	ret

	.endsub

incoming_packet_text:
	.defs	"comm_process_packet: got: %b\n\0"
# End of comm_process_packet routine
#####################################################################

#####################################################################
log_fatal:
	.sub

	call	log
	ldc.1
	ncall	sys_exit

	.endsub
# End of log_fatal routine
#####################################################################

#####################################################################
log:
	.sub # ( format ... -- )

	# Output the time stamp
	ncall	sys_time

	# ( x -- )
	ldc.ub	60
	divu
	swap # ( emins ss ... -- )

	ldc.ub	60
	divu
	swap # ( ehrs mm ss ... -- )

	# Hours
	ldc.ub	24
	divu
	swap # ( edays hh mm ss ... -- )
	pop

	lea		@@ts_format
	ldc.1
	ncall	rtl_print_fd
	pop

	# Output the text
	ldc.1
	ncall	rtl_print_fd
	pop
	ret

@@ts_format:
	.defs	"[%02d:%02d:%02d] \0"

	.endsub
# End of log routine
#####################################################################


get_hwaddr:
	.sub # ( -- status )

@@sockfd	.const 0
@@ifconf	.const 1
@@buffer	.const 2
	locals	3

	ldc.ub	IPPROTO_UDP
	ldc.ub	SOCK_DGRAM
	ncall	socket_create
	stloc	@@sockfd

	ldc.ub	4+4
	ncall	rtl_alloc
	stloc	@@ifconf

	ldc.ub	(16+16)*4
	ncall	rtl_alloc
	dup
	stloc	@@buffer

	ldloc	@@ifconf
	ldc.ub	4
	add
	stm.w
	ldc.ub	4+4
	ldloc	@@ifconf
	stm.w

	ldloc	@@ifconf
	ldc.w	SIOCGIFCONF
	ldloc	@@sockfd
	ncall	io_ioctl
	br.f	@@ok1
	lea		@@SIOCGIFCONF_failed
	call	log_fatal

@@ok1:
	ldloc	@@ifconf
	ldm.w
	lea		@@num_ifaces
	call	log

@@leave:
	ldloc	@@buffer
	ncall	rtl_free
	ldloc	@@ifconf
	ncall	rtl_free
	ret

@@SIOCGIFCONF_failed:
	.defs	"SIOCGIFCONF failed\n\0"
@@num_ifaces:
	.defs	"Interfaces: %d\n\0"

	.endsub


#####################################################################
get_hwaddr2:
	.sub # ( -- status )

@@sockfd	.const 0
@@index		.const 1
@@buffer	.const 2
@@data		.const 3
	locals	4

	ldc.ub	6
	ldc.0
	lea		comm_hwaddr
	ncall	rtl_memset

	ldc.ub	IPPROTO_UDP
	ldc.ub	SOCK_DGRAM
	ncall	socket_create
	stloc	@@sockfd

	ldc.ub	16
	stloc	@@index

	ldc.ub	16 + 16 # should be sizeof(struct ifreq)
	ncall	rtl_alloc
	dup
	stloc	@@buffer
	ldc.ub	16
	add
	stloc	@@data

@@loop:
	ldloc	@@index
	lea		@@text1
	ldc.1
	ncall	rtl_print_fd
	pop

	# buffer->ifr_ifindex = index
	ldloc	@@index
	ldloc	@@data
	stm.w

	# get the iface name
	ldloc	@@buffer
	ldc.w	SIOCGIFNAME
	ldloc	@@sockfd
	ncall	io_ioctl
	br.t	@@loop_next

@@get_hwaddr:
	# get the iface hwaddr
	ldloc	@@buffer
	ldc.w	SIOCGIFHWADDR
	ldloc	@@sockfd
	ncall	io_ioctl
	br.f	@@check_hwaddr
	lea		@@SIOCGIFHWADDR_failed
	call	log_fatal

@@check_hwaddr:
	# check whether this is a loopback (all zeros)
	ldloc	@@data
	ldm.w
	br.f	@@loop_next

	# store the hw address
	ldc.ub	6
	ldloc	@@data
	lea		comm_hwaddr
	ncall	rtl_memcpy
	# found.
	ldc.1
	br		@@loop_end

@@loop_next:
	# Next index
	ldloc	@@index
	ldc.1
	sub
	dup
	stloc	@@index
	br.t	@@loop
	# not found.
	ldc.0

@@loop_end:

	ldloc	@@buffer
	ncall	rtl_free

	ldloc	@@sockfd
	ncall	io_close

	ret

@@text1:
	.defs	"Trying index %d\n\0"

@@SIOCGIFNAME_failed:
	.defs	"SIOCGIFNAME failed.\n\0"
@@SIOCGIFHWADDR_failed:
	.defs	"SIOCGIFHWADDR failed.\n\0"

	.endsub
# End of get_hwaddr routine
#####################################################################

#
# .data section start
#

comm_running:
	.defb	1

#
# .bss section start
#

comm_socket:
	.resw	1
comm_hwaddr:
	.resb	6
