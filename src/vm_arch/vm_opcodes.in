
typedef struct {
	const char * const mnemonic;
	const char * const description;
	//uint8_t opcode;
	uint8_t stack_in;
	uint8_t stack_out;
} vm_opcode_info_t;

static const vm_opcode_info_t opcodes[] = {

	/* Arithmetics */

	{
		"ADD", "Addition",
		2, 1, /* a b -- (b + a) */
	},
	{
		"SUB", "Subtraction",
		2, 1, /* a b -- (b - a) */
	},
	{
		"MULU", "Multiplication (unsigned*unsigned)",
		2, 2, /* a b -- hi(b * a) lo(b * a) */
	},
	{
		"MULS", "Multiplication (signed*signed)",
		2, 2, /* a b -- hi(b * a) lo(b * a) */
	},
	{
		"DIVU", "Division (unsigned/unsigned)",
		2, 2, /* a b -- rem(b / a) quot(b / a) */
	},
	{
		"DIVS", "Division (signed/signed)",
		2, 2, /* a b -- rem(b / a) quot(b / a) */
	},
	
	/* Bitwise operations */

	{
		"AND", "Bitwise AND",
		2, 1, /* a b -- (a & b) */
	},
	{
		"OR", "Bitwise OR",
		2, 1, /* a b -- (a & b) */
	},
	{
		"XOR", "Bitwise XOR",
		2, 1, /* a b -- (a ^ b) */
	},
	{
		"NOT", "Bitwise NOT",
		2, 1, /* a -- (~a) */
	},
	{
		"LSL", "Logical shift left",
		2, 1, /* a b -- (b << a) */
	},
	{
		"LSR", "Logical shift right",
		2, 1, /* a b -- (b >> a) */
	},
	{
		"ASR", "Arithmetic shift right",
		2, 1, /* a b -- (b >> a) */
	},
	
	/* Conditionals */

	{
		"CMP.LT", "Compare (less than)",
		2, 1, /* a b -- (a > b) */
	},
	{
		"CMP.GT", "Compare (greater than)",
		2, 1, /* a b -- (a < b) */
	},
	{
		"CMP.B", "Compare (below)",
		2, 1, /* a b -- (a < b) */
	},
	{
		"CMP.A", "Compare (above)",
		2, 1, /* a b -- (a > b) */
	},
	{
		"CMP.EQ", "Compare (equal)",
		2, 1, /* a b -- (a == b) */
	},
	
	/* Constant loading */
	
	{
		"LDC.0", "Load 0 on the stack",
		0, 1,
	},
	{
		"LDC.1", "Load 1 on the stack",
		0, 1,
	},
	{
		"LDC.2", "Load 2 on the stack",
		0, 1,
	},
	{
		"LDC.UB", "Load an unsigned byte on the stack",
		0, 1,
	},
	{
		"LDC.SB", "Load a signed byte on the stack",
		0, 1,
	},
	{
		"LDC.W", "Load a 32-bit value on the stack",
		0, 1,
	},
	{
		"LEA", "Load an effective address on the stack",
		0, 1,
	},
	
	/* Memory access: loads */
	
	{
		"LDM.UB", "Load a 8-bit unsigned from memory",
		1, 1,
	},
	{
		"LDM.SB", "Load a 8-bit signed from memory",
		1, 1,
	},
	{
		"LDM.UH", "Load a 16-bit unsigned from memory",
		1, 1,
	},
	{
		"LDM.SH", "Load a 16-bit signed from memory",
		1, 1,
	},
	{
		"LDM.W", "Load a 32-bit from memory",
		1, 1,
	},
	
	/* Memory access: stores */

	{
		"STM.B", "Store a 8-bit to memory",
		2, 0, /* addr value -- */
	},
	{
		"STM.H", "Store a 16-bit to memory",
		2, 0, /* addr value -- */
	},
	{
		"STM.W", "Store a 32-bit to memory",
		2, 0, /* addr value -- */
	},
	
	/* Memory access: locals */
	
	{
		"LOCALS", "Create a space for local vars",
		0, 0,
	},
	{
		"LDLOC", "Load a local",
		0, 1,
	},
	{
		"STLOC", "Store a local",
		1, 0,
	},
	
	/* Stack manipulations */
	
	{
		"DUP", "Duplicate the topmost entry on the stack",
		1, 2, /* a -- a a */
	},
	{
		"SWAP", "Swap two entries on the top of the stack",
		2, 2, /* a b -- b a */
	},
	{
		"POP", "Discard the topmost entry on the stack",
		1, 0,
	},
	
	/* Control flow insns */
	
	{
		"BR", "Branch short (8-bit offset)",
		0, 0,
	},
	{
		"BR.T", "Branch if true (8-bit offset)",
		1, 0,
	},
	{
		"BR.F", "Branch if false (8-bit offset)",
		1, 0,
	},
	{
		"CALL", "Call a subroutine (32-bit offset)",
		0, 0,
	},
	{
		"RET", "Return from the subroutine",
		0, 0,
	},
	{
		"ICALL", "Indirect call",
		1, 0,
	},
	{
		"IJMP", "Indirect jump",
		1, 0,
	},
	{
		"NCALL", "Call a native subroutine",
		0, 0,
	},
};


